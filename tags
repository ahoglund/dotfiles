!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$FZF_DEFAULT_COMMAND	vim/init.vim	/^  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git\/*"'$/;"	v
$NVIM_TUI_ENABLE_CURSOR_SHAPE	vim/init.vim	/^  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1$/;"	v
<C-H>	vim/init.vim	/^nmap <C-H> <C-W><C-H>$/;"	m
<C-J>	vim/init.vim	/^nmap <C-J> <C-W><C-J>$/;"	m
<C-K>	vim/init.vim	/^nmap <C-K> <C-W><C-K>$/;"	m
<C-L>	vim/init.vim	/^nmap <C-L> <C-W><C-L>$/;"	m
<C-c>	vim/init.vim	/^vnoremap <C-c> "*y<CR>$/;"	m
<C-h>	vim/init.vim	/^vnoremap <C-h> :<<CR>gv=gv$/;"	m
<C-j>	vim/init.vim	/^vnoremap <C-j> :m '>+1<CR>gv=gv$/;"	m
<C-k>	vim/init.vim	/^vnoremap <C-k> :m '<-2<CR>gv=gv$/;"	m
<C-l>	vim/init.vim	/^vnoremap <C-l> :><CR>gv=gv$/;"	m
<C-p>	vim/init.vim	/^nnoremap <C-p> :Files<CR>$/;"	m
<Leader>0	vim/init.vim	/^nmap <Leader>0 :10b<CR>$/;"	m
<Leader>1	vim/init.vim	/^nmap <Leader>1 :1b<CR>$/;"	m
<Leader>2	vim/init.vim	/^nmap <Leader>2 :2b<CR>$/;"	m
<Leader>3	vim/init.vim	/^nmap <Leader>3 :3b<CR>$/;"	m
<Leader>4	vim/init.vim	/^nmap <Leader>4 :4b<CR>$/;"	m
<Leader>5	vim/init.vim	/^nmap <Leader>5 :5b<CR>$/;"	m
<Leader>6	vim/init.vim	/^nmap <Leader>6 :6b<CR>$/;"	m
<Leader>7	vim/init.vim	/^nmap <Leader>7 :7b<CR>$/;"	m
<Leader>8	vim/init.vim	/^nmap <Leader>8 :8b<CR>$/;"	m
<Leader>9	vim/init.vim	/^nmap <Leader>9 :9b<CR>$/;"	m
<Leader>T	vim/init.vim	/^nmap <Leader>T :TestFile<CR>$/;"	m
<Leader>a	vim/init.vim	/^nmap <Leader>a :TestSuite<CR>$/;"	m
<Leader>ae	vim/init.vim	/^nmap <Leader>ae :Tabularize \/=<CR>$/;"	m
<Leader>ae	vim/init.vim	/^vmap <Leader>ae :Tabularize \/=<CR>$/;"	m
<Leader>ag	vim/init.vim	/^vnoremap <Leader>ag y:Ag '<c-r>"' *<cr>$/;"	m
<Leader>ah	vim/init.vim	/^nmap <Leader>ah :Tabularize \/:\\zs<CR>$/;"	m
<Leader>ah	vim/init.vim	/^vmap <Leader>ah :Tabularize \/:\\zs<CR>$/;"	m
<Leader>ahr	vim/init.vim	/^nmap <Leader>ahr :Tabularize \/=><CR>$/;"	m
<Leader>ahr	vim/init.vim	/^vmap <Leader>ahr :Tabularize \/=><CR>$/;"	m
<Leader>b	vim/init.vim	/^nmap <Leader>b :Buffers<CR>$/;"	m
<Leader>c	vim/init.vim	/^nmap <Leader>c ZZ<CR>$/;"	m
<Leader>e	vim/init.vim	/^nmap <Leader>e :edit<SPACE>$/;"	m
<Leader>f	vim/init.vim	/^nmap <Leader>f \/<C-R><C-W><CR>$/;"	m
<Leader>fh	vim/init.vim	/^nmap <Leader>fh :%s\/:\\(\\w\\+\\)\\s*=>\\s*\/\\1: \/g<CR>$/;"	m
<Leader>fr	vim/init.vim	/^nnoremap <Leader>fr :%s\/\\<<C-r><C-w>\\>\/$/;"	m
<Leader>fr	vim/init.vim	/^vnoremap <Leader>fr "hy:%s\/<C-r>h\/$/;"	m
<Leader>g	vim/init.vim	/^nmap <Leader>g :TestVisit<CR>$/;"	m
<Leader>h	vim/init.vim	/^nmap <Leader>h :bfirst<CR>$/;"	m
<Leader>j	vim/init.vim	/^nmap <Leader>j :bprevious<CR>$/;"	m
<Leader>k	vim/init.vim	/^nmap <Leader>k :bnext<CR>$/;"	m
<Leader>l	vim/init.vim	/^nmap <Leader>l :TestLast<CR>$/;"	m
<Leader>r	vim/init.vim	/^nmap <silent> <Leader>r :Files<CR>$/;"	m
<Leader>s	vim/init.vim	/^nmap <Leader>s :w!<CR>$/;"	m
<Leader>t	vim/init.vim	/^nmap <Leader>t :TestNearest<CR>$/;"	m
<Leader>v	vim/init.vim	/^nmap <Leader>v :view<SPACE>$/;"	m
<Leader>vrce	vim/init.vim	/^nnoremap <Leader>vrce :vsplit $MYVIMRC<cr>$/;"	m
<Leader>vrcs	vim/init.vim	/^nnoremap <Leader>vrcs :source $MYVIMRC<cr>$/;"	m
<space>	vim/init.vim	/^map <space> <Leader>$/;"	m
<space><space>	vim/init.vim	/^nmap <space><space> <C-^><CR>$/;"	m
K	vim/init.vim	/^nmap K :grep! "\\b<C-R><C-W>\\b"<CR>:cw<CR>$/;"	m
Mkdir	vim/init.vim	/^function s:Mkdir()$/;"	f
OpenPR	vim/init.vim	/^function! OpenPR(sha)$/;"	f
Rg	vim/init.vim	/^  command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)$/;"	c
\	vim/init.vim	/^nmap \\ :Rg<SPACE>$/;"	m
__git_eread	git-prompt.sh	/^__git_eread ()$/;"	f
__git_ps1	git-prompt.sh	/^__git_ps1 ()$/;"	f
__git_ps1_colorize_gitstring	git-prompt.sh	/^__git_ps1_colorize_gitstring ()$/;"	f
__git_ps1_show_upstream	git-prompt.sh	/^__git_ps1_show_upstream ()$/;"	f
append_ul	vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bang	vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	vim/autoload/plug.vim	/^function! s:bar()$/;"	f
batchfile	vim/autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
check_ruby	vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
compare_git_uri	vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
define_commands	vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
delete	vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
diff	vim/autoload/plug.vim	/^function! s:diff()$/;"	f
dirpath	vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
do	vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
err	vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
esc	vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
extract_name	vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
find_name	vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
format_git_log	vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
fugitive_ext	vim/init.vim	/^augroup fugitive_ext$/;"	a
g:ctrlp_use_caching	vim/init.vim	/^  let g:ctrlp_use_caching = 0$/;"	v
g:go_version_warning	vim/init.vim	/^let g:go_version_warning = 0$/;"	v
g:loaded_plug	vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:neoterm_default_mod	vim/init.vim	/^  let g:neoterm_default_mod = 'vertical'$/;"	v
g:plugs_order	vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:test#preserve_screen	vim/init.vim	/^  let g:test#preserve_screen = 1$/;"	v
git_validate	vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
hash_match	vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
infer_properties	vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
is_local_plug	vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
jj	vim/init.vim	/^inoremap jj <esc>$/;"	m
jk	vim/init.vim	/^inoremap jk <esc>$/;"	m
job_abort	vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
last_non_empty_line	vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	vim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lines	vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
load_plugin	vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
lod	vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
mapleader	vim/init.vim	/^let mapleader=","$/;"	v
names	vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
new_window	vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
nvim_cb	vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
parse_options	vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
path	vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
plug#	vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	vim/autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	vim/autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	vim/autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	vim/autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	vim/autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	vim/autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
reap	vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	vim/autoload/plug.vim	/^function! s:retry()$/;"	f
revert	vim/autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	vim/autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:TYPE	vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:cpo_save	vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	vim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:last_rtp	vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	vim/autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
section	vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
setup_gitconfig	install.sh	/^setup_gitconfig () {$/;"	f
shellesc_cmd	vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	vim/autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	vim/autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
snapshot	vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
status	vim/autoload/plug.vim	/^function! s:status()$/;"	f
status_load	vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
switch_in	vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
system	vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
test#strategy	vim/init.vim	/^  let test#strategy = "neovim"$/;"	v
tick	vim/autoload/plug.vim	/^function! s:tick()$/;"	f
to_a	vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
trim	vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
update	vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
version_requirement	vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
warn	vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
with_cd	vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wrap_cmds	vim/autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
